#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Datos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TouchSecurity")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertCiudades(Ciudades instance);
    partial void UpdateCiudades(Ciudades instance);
    partial void DeleteCiudades(Ciudades instance);
    partial void InsertEmpresas(Empresas instance);
    partial void UpdateEmpresas(Empresas instance);
    partial void DeleteEmpresas(Empresas instance);
    partial void InsertReportes(Reportes instance);
    partial void UpdateReportes(Reportes instance);
    partial void DeleteReportes(Reportes instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Datos.Properties.Settings.Default.TouchSecurityConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ciudades> Ciudades
		{
			get
			{
				return this.GetTable<Ciudades>();
			}
		}
		
		public System.Data.Linq.Table<Empresas> Empresas
		{
			get
			{
				return this.GetTable<Empresas>();
			}
		}
		
		public System.Data.Linq.Table<Reportes> Reportes
		{
			get
			{
				return this.GetTable<Reportes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ciudades")]
	public partial class Ciudades : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Ciudad;
		
		private string _Provincia;
		
		private EntitySet<Empresas> _Empresas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCiudadChanging(string value);
    partial void OnCiudadChanged();
    partial void OnProvinciaChanging(string value);
    partial void OnProvinciaChanged();
    #endregion
		
		public Ciudades()
		{
			this._Empresas = new EntitySet<Empresas>(new Action<Empresas>(this.attach_Empresas), new Action<Empresas>(this.detach_Empresas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ciudad", DbType="NVarChar(50)")]
		public string Ciudad
		{
			get
			{
				return this._Ciudad;
			}
			set
			{
				if ((this._Ciudad != value))
				{
					this.OnCiudadChanging(value);
					this.SendPropertyChanging();
					this._Ciudad = value;
					this.SendPropertyChanged("Ciudad");
					this.OnCiudadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provincia", DbType="NVarChar(50)")]
		public string Provincia
		{
			get
			{
				return this._Provincia;
			}
			set
			{
				if ((this._Provincia != value))
				{
					this.OnProvinciaChanging(value);
					this.SendPropertyChanging();
					this._Provincia = value;
					this.SendPropertyChanged("Provincia");
					this.OnProvinciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ciudades_Empresas", Storage="_Empresas", ThisKey="Id", OtherKey="Ciudad_Per")]
		public EntitySet<Empresas> Empresas
		{
			get
			{
				return this._Empresas;
			}
			set
			{
				this._Empresas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Empresas(Empresas entity)
		{
			this.SendPropertyChanging();
			entity.Ciudades = this;
		}
		
		private void detach_Empresas(Empresas entity)
		{
			this.SendPropertyChanging();
			entity.Ciudades = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Empresas")]
	public partial class Empresas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Ruc;
		
		private string _Empresa_Nom;
		
		private string _Direccion;
		
		private System.Nullable<int> _Ciudad_Per;
		
		private string _Contrasenia;
		
		private string _Telefeno;
		
		private System.Nullable<double> _Latitud;
		
		private System.Nullable<double> _Longitud;
		
		private EntitySet<Reportes> _Reportes;
		
		private EntityRef<Ciudades> _Ciudades;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRucChanging(string value);
    partial void OnRucChanged();
    partial void OnEmpresa_NomChanging(string value);
    partial void OnEmpresa_NomChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnCiudad_PerChanging(System.Nullable<int> value);
    partial void OnCiudad_PerChanged();
    partial void OnContraseniaChanging(string value);
    partial void OnContraseniaChanged();
    partial void OnTelefenoChanging(string value);
    partial void OnTelefenoChanged();
    partial void OnLatitudChanging(System.Nullable<double> value);
    partial void OnLatitudChanged();
    partial void OnLongitudChanging(System.Nullable<double> value);
    partial void OnLongitudChanged();
    #endregion
		
		public Empresas()
		{
			this._Reportes = new EntitySet<Reportes>(new Action<Reportes>(this.attach_Reportes), new Action<Reportes>(this.detach_Reportes));
			this._Ciudades = default(EntityRef<Ciudades>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ruc", DbType="NVarChar(13)")]
		public string Ruc
		{
			get
			{
				return this._Ruc;
			}
			set
			{
				if ((this._Ruc != value))
				{
					this.OnRucChanging(value);
					this.SendPropertyChanging();
					this._Ruc = value;
					this.SendPropertyChanged("Ruc");
					this.OnRucChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Empresa_Nom", DbType="NVarChar(50)")]
		public string Empresa_Nom
		{
			get
			{
				return this._Empresa_Nom;
			}
			set
			{
				if ((this._Empresa_Nom != value))
				{
					this.OnEmpresa_NomChanging(value);
					this.SendPropertyChanging();
					this._Empresa_Nom = value;
					this.SendPropertyChanged("Empresa_Nom");
					this.OnEmpresa_NomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direccion", DbType="NVarChar(50)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ciudad_Per", DbType="Int")]
		public System.Nullable<int> Ciudad_Per
		{
			get
			{
				return this._Ciudad_Per;
			}
			set
			{
				if ((this._Ciudad_Per != value))
				{
					if (this._Ciudades.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCiudad_PerChanging(value);
					this.SendPropertyChanging();
					this._Ciudad_Per = value;
					this.SendPropertyChanged("Ciudad_Per");
					this.OnCiudad_PerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contrasenia", DbType="NVarChar(15)")]
		public string Contrasenia
		{
			get
			{
				return this._Contrasenia;
			}
			set
			{
				if ((this._Contrasenia != value))
				{
					this.OnContraseniaChanging(value);
					this.SendPropertyChanging();
					this._Contrasenia = value;
					this.SendPropertyChanged("Contrasenia");
					this.OnContraseniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefeno", DbType="NVarChar(10)")]
		public string Telefeno
		{
			get
			{
				return this._Telefeno;
			}
			set
			{
				if ((this._Telefeno != value))
				{
					this.OnTelefenoChanging(value);
					this.SendPropertyChanging();
					this._Telefeno = value;
					this.SendPropertyChanged("Telefeno");
					this.OnTelefenoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitud", DbType="Float")]
		public System.Nullable<double> Latitud
		{
			get
			{
				return this._Latitud;
			}
			set
			{
				if ((this._Latitud != value))
				{
					this.OnLatitudChanging(value);
					this.SendPropertyChanging();
					this._Latitud = value;
					this.SendPropertyChanged("Latitud");
					this.OnLatitudChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitud", DbType="Float")]
		public System.Nullable<double> Longitud
		{
			get
			{
				return this._Longitud;
			}
			set
			{
				if ((this._Longitud != value))
				{
					this.OnLongitudChanging(value);
					this.SendPropertyChanging();
					this._Longitud = value;
					this.SendPropertyChanged("Longitud");
					this.OnLongitudChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empresas_Reportes", Storage="_Reportes", ThisKey="Id", OtherKey="Empresa_Per")]
		public EntitySet<Reportes> Reportes
		{
			get
			{
				return this._Reportes;
			}
			set
			{
				this._Reportes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ciudades_Empresas", Storage="_Ciudades", ThisKey="Ciudad_Per", OtherKey="Id", IsForeignKey=true)]
		public Ciudades Ciudades
		{
			get
			{
				return this._Ciudades.Entity;
			}
			set
			{
				Ciudades previousValue = this._Ciudades.Entity;
				if (((previousValue != value) 
							|| (this._Ciudades.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ciudades.Entity = null;
						previousValue.Empresas.Remove(this);
					}
					this._Ciudades.Entity = value;
					if ((value != null))
					{
						value.Empresas.Add(this);
						this._Ciudad_Per = value.Id;
					}
					else
					{
						this._Ciudad_Per = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ciudades");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reportes(Reportes entity)
		{
			this.SendPropertyChanging();
			entity.Empresas = this;
		}
		
		private void detach_Reportes(Reportes entity)
		{
			this.SendPropertyChanging();
			entity.Empresas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reportes")]
	public partial class Reportes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Empresa_Per;
		
		private string _Descripcion;
		
		private System.Nullable<System.DateTime> _Fecha;
		
		private EntityRef<Empresas> _Empresas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmpresa_PerChanging(System.Nullable<int> value);
    partial void OnEmpresa_PerChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    partial void OnFechaChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaChanged();
    #endregion
		
		public Reportes()
		{
			this._Empresas = default(EntityRef<Empresas>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Empresa_Per", DbType="Int")]
		public System.Nullable<int> Empresa_Per
		{
			get
			{
				return this._Empresa_Per;
			}
			set
			{
				if ((this._Empresa_Per != value))
				{
					if (this._Empresas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpresa_PerChanging(value);
					this.SendPropertyChanging();
					this._Empresa_Per = value;
					this.SendPropertyChanged("Empresa_Per");
					this.OnEmpresa_PerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descripcion", DbType="NVarChar(100)")]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fecha", DbType="DateTime")]
		public System.Nullable<System.DateTime> Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empresas_Reportes", Storage="_Empresas", ThisKey="Empresa_Per", OtherKey="Id", IsForeignKey=true)]
		public Empresas Empresas
		{
			get
			{
				return this._Empresas.Entity;
			}
			set
			{
				Empresas previousValue = this._Empresas.Entity;
				if (((previousValue != value) 
							|| (this._Empresas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empresas.Entity = null;
						previousValue.Reportes.Remove(this);
					}
					this._Empresas.Entity = value;
					if ((value != null))
					{
						value.Reportes.Add(this);
						this._Empresa_Per = value.Id;
					}
					else
					{
						this._Empresa_Per = default(Nullable<int>);
					}
					this.SendPropertyChanged("Empresas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
